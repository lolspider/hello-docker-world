pipeline {
    agent any
    stages {
        stage("gradle build") {
            agent {
                docker {
                    image 'gradle:alpine'
                }
            }
            steps {
                script {
                    sh 'gradle build'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                }
            }
        }
        stage("push docker image") {
            steps {
                 sh "docker build -t lolspider/hello-docker-world:${env.BUILD_ID}"
	               withDockerRegistry(credentialsId: 'dockerhub', url: 'https://docker.io') {
                    sh "docker push lolspider/hello-docker-world:${env.BUILD_ID}"
                 }
            }
        }
        stage("clone ansible playbook") {
            steps {
                git credentialsId: '5fbf29ca-18b1-462c-87c8-ec8f88a4788e', url: 'https://github.com/lolspider/ansible-shop.git'
            }
        }
        stage("deploy to dev env") {
            steps {
                withCredentials([file(credentialsId: 'git-crypt', variable: 'git_crypt')]) {
                  sh 'git-crypt unlock "$git_crypt"'
                  sh "sudo chmod 600 ssh_keys/*"
                  sh "ansible-playbook -i inventories/staging/hosts --extra-vars 'BUILD_ID=${env.BUILD_ID}'  hello-docker-world.yml"
                }
            }
        }
    }
    post {
        always {
          sh 'git-crypt lock'
        }
    }
}
